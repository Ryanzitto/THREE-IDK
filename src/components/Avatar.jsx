/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.10 public/models/Avatar.glb 
*/

import React, { useEffect, useRef, useState } from "react";
import { useAnimations, useFBX, useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useControls } from "leva";
import * as THREE from "three";

export default function Avatar(props) {
  const { animation } = props;

  const group = useRef();

  const { headfollow, cursorFollow } = useControls({
    headfollow: false,
    cursorFollow: false,
  });
  const { nodes, materials } = useGLTF("models/Avatar.glb");
  const [moveRight, setMoveRight] = useState(false);
  const [moveLeft, setMoveLeft] = useState(false);
  const [moveFront, setMoveFront] = useState(false);
  const [moveBack, setMoveBack] = useState(false);
  const [anim, setAnim] = useState(null);
  const [qualAnim, setQualAnim] = useState(null);

  const { animations: danceAnimation } = useFBX("animations/Dance.fbx");
  const { animations: greetingAnimation } = useFBX("animations/Greet.fbx");
  const { animations: standingAnimation } = useFBX("animations/Idle.fbx");
  const { animations: capoeiraAnimation } = useFBX("animations/Capoeira.fbx");
  const { animations: ginga1Animation } = useFBX("animations/Ginga-1.fbx");
  const { animations: walkAnimation } = useFBX("animations/Walking.fbx");
  const { animations: jumpAnimation } = useFBX("animations/Jumping.fbx");

  danceAnimation[0].name = "Dance";
  greetingAnimation[0].name = "Greet";
  standingAnimation[0].name = "Idle";
  capoeiraAnimation[0].name = "Capoeira";
  ginga1Animation[0].name = "Ginga-1";
  walkAnimation[0].name = "Walk";
  jumpAnimation[0].name = "Jump";

  const { actions } = useAnimations(
    [
      danceAnimation[0],
      greetingAnimation[0],
      standingAnimation[0],
      capoeiraAnimation[0],
      ginga1Animation[0],
      walkAnimation[0],
      jumpAnimation[0],
    ],
    group
  );

  useFrame((state) => {
    if (headfollow) {
      group.current.getObjectByName("Neck").lookAt(state.camera.position);
    }
    if (cursorFollow) {
      const target = new THREE.Vector3(state.mouse.x, state.mouse.y, 1);
      group.current.getObjectByName("Spine2").lookAt(target);
    }
  });
  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play();
    return () => {
      actions[animation].reset().fadeOut(0.5);
    };
  }, [animation]);

  useEffect(() => {
    if (moveBack | moveFront | moveLeft | moveRight) {
      actions[animation].reset().fadeOut(0.5);
      actions["Walk"]?.reset().fadeIn(0.5).play();
    } else {
      actions["Walk"]?.reset().fadeOut(0.5);
      actions["Idle"].reset().play().fadeIn(0.5);
    }
  }, [moveBack, moveFront, moveLeft, moveRight]);

  useEffect(() => {
    let animationTimeout;

    if (anim === true) {
      if (qualAnim === "Dance") {
        actions[animation].reset().fadeOut(0.5);
        actions[qualAnim]?.reset().fadeIn(0.5).play();

        animationTimeout = setTimeout(() => {
          actions[qualAnim]?.reset().fadeOut(0.5);
          actions["Idle"]?.reset().fadeIn(0.5).play();
          setAnim(false);
        }, 14000);
      } else if (qualAnim === "Jump") {
        actions[animation].reset().fadeOut(0.5);
        actions[qualAnim]?.reset().fadeIn(0.5).play();

        animationTimeout = setTimeout(() => {
          actions[qualAnim]?.reset().fadeOut(0.5);
          actions["Idle"]?.reset().fadeIn(0.5).play();
          setAnim(false);
        }, 2000);
      }
    } else if (anim === false) {
      actions[qualAnim]?.reset().fadeOut(0.5);
      actions["Idle"]?.reset().fadeIn(0.5).play();
    }

    // Limpa o timeout ao desmontar o componente ou ao reexecutar o efeito
    return () => clearTimeout(animationTimeout);
  }, [anim]);

  /////////////////////////////////////////////////////////////////////////

  useFrame((direcao) => {
    // switch (direcao) {
    //   case moveRight:
    //     group.current.position.x += 0.04;
    //     group.current.rotation.y = Math.PI / 2;
    //     break;
    //   default:
    //     break;
    // }
    if (moveRight) {
      group.current.position.x += 0.04;
      group.current.rotation.y = Math.PI / 2;
    }
    if (moveLeft) {
      group.current.position.x -= 0.04;
      group.current.rotation.y = -Math.PI / 2;
    }
    if (moveBack) {
      group.current.position.z += 0.04;
      group.current.rotation.y = -Math.PI * 2;
    }
    if (moveFront) {
      group.current.position.z -= 0.04;
      group.current.rotation.y = Math.PI;
    }
    if (moveFront && moveLeft) {
      group.current.position.z -= 0.04;
      group.current.rotation.y = -Math.PI * 0.75;
    }
    if (moveFront && moveRight) {
      group.current.position.z -= 0.04;
      group.current.rotation.y = Math.PI * 0.75;
    }
    if (moveBack && moveLeft) {
      group.current.position.z += 0.04;
      group.current.rotation.y = -Math.PI * 0.25;
    }
    if (moveBack && moveRight) {
      group.current.position.z += 0.04;
      group.current.rotation.y = +Math.PI * 0.25;
    }
    if (moveBack && moveFront) {
      setAnim(null);
    }
    if (moveLeft && moveRight) {
      setAnim(null);
    }
  });

  useEffect(() => {
    const keyDownHandler = (event) => {
      console.log(event.key);
      if (event.key === "ArrowRight") {
        setAnim(false);
        event.preventDefault();
        setMoveRight(true);
      }
      if (event.key === "ArrowLeft") {
        setAnim(false);
        event.preventDefault();
        setMoveLeft(true);
      }
      if (event.key === "ArrowUp") {
        setAnim(false);
        event.preventDefault();
        setMoveFront(true);
      }
      if (event.key === "ArrowDown") {
        setAnim(false);
        event.preventDefault();
        setMoveBack(true);
      }
      if (event.key === "d") {
        event.preventDefault();
        setAnim(true);
        setQualAnim("Dance");
        setMoveBack(false);
        setMoveFront(false);
        setMoveRight(false);
        setMoveLeft(false);
      }
      if (event.key === "c") {
        event.preventDefault();
        setAnim(true);
        setQualAnim("Jump");
        setMoveBack(false);
        setMoveFront(false);
        setMoveRight(false);
        setMoveLeft(false);
      }
    };

    const keyUpHandler = (event) => {
      event.preventDefault();
      setMoveRight(false);
      setMoveLeft(false);
      setMoveFront(false);
      setMoveBack(false);
    };

    document.addEventListener("keydown", keyDownHandler);
    document.addEventListener("keyup", keyUpHandler);

    return () => {
      document.removeEventListener("keydown", keyDownHandler);
      document.removeEventListener("keyup", keyUpHandler);
    };
  }, []);

  return (
    <group {...props} ref={group} dispose={null}>
      <group rotation-x={-Math.PI / 2}>
        <primitive object={nodes.Hips} />
        <skinnedMesh
          geometry={nodes.Wolf3D_Body.geometry}
          material={materials.Wolf3D_Body}
          skeleton={nodes.Wolf3D_Body.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
          material={materials.Wolf3D_Outfit_Bottom}
          skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
          material={materials.Wolf3D_Outfit_Footwear}
          skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Outfit_Top.geometry}
          material={materials.Wolf3D_Outfit_Top}
          skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Hair.geometry}
          material={materials.Wolf3D_Hair}
          skeleton={nodes.Wolf3D_Hair.skeleton}
        />
        <skinnedMesh
          geometry={nodes.Wolf3D_Glasses.geometry}
          material={materials.Wolf3D_Glasses}
          skeleton={nodes.Wolf3D_Glasses.skeleton}
        />
        <skinnedMesh
          name="EyeLeft"
          geometry={nodes.EyeLeft.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeLeft.skeleton}
          morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
        />
        <skinnedMesh
          name="EyeRight"
          geometry={nodes.EyeRight.geometry}
          material={materials.Wolf3D_Eye}
          skeleton={nodes.EyeRight.skeleton}
          morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
          morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Head"
          geometry={nodes.Wolf3D_Head.geometry}
          material={materials.Wolf3D_Skin}
          skeleton={nodes.Wolf3D_Head.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
        />
        <skinnedMesh
          name="Wolf3D_Teeth"
          geometry={nodes.Wolf3D_Teeth.geometry}
          material={materials.Wolf3D_Teeth}
          skeleton={nodes.Wolf3D_Teeth.skeleton}
          morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
          morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
        />
      </group>
    </group>
  );
}

useGLTF.preload("models/Avatar.glb");
